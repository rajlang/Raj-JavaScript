/**
 * Tokens for Raj Language
 */
const TOKENS = {
  // Punctuation
  punctuations: [
    ".",
    ",",
    ";",
    ":",
    "?",
    "!",
    "-",
    "+",
    "*",
    "/",
    "%",
    "&",
    "|",
    "^",
    "#",
    "~",
    "<",
    ">",
    "=",
    "{",
    "}",
    "(",
    ")",
    "[",
    "]",
    "@",
    "$",
    "\\",
    "`",
    '"',
    "'",
  ],
  ".": "DOT",
  ",": "COMMA",
  ";": "SEMICOLON",
  ":": "COLON",
  "?": "QUESTION",
  "!": "BANG",
  "-": "MINUS",
  "+": "PLUS",
  "*": "STAR",
  "/": "SLASH",
  "%": "PERCENT",
  "&": "AMPERSAND",
  "|": "PIPE",
  "^": "CARET",
  "~": "TILDE",
  "<": "LT",
  ">": "GT",
  "=": "EQ",
  "{": "LBRACE",
  "}": "RBRACE",
  "(": "LPAREN",
  ")": "RPAREN",
  "[": "LBRACKET",
  "]": "RBRACKET",
  "@": "AT",
  $: "DOLLAR",
  "\\": "BACKSLASH",
  "`": "BACKTICK",
  '"': "DOUBLEQUOTE",
  "'": "SINGLEQUOTE",

  // whitespace
  " ": "SPACE",
  "\n": "NEWLINE",
  "\r": "NEWLINE",
  "\t": "TAB",
  "\v": "VERTICALTAB",
  "\f": "FORMFEED",
  "\b": "BACKSPACE",
  "\0": "NULL",

  keywords: [
    "if",
    "then",
    "else",
    "do",
    "while",
    "for",
    "break",
    "continue",
    "pass",
    "return",
    "fn",
    "let",
    "const",
    "new",
    "this",
    "class",
    "extends",
    "super",
    "import",
    "export",
    "from",
    "as",
    "in",
    "of",
    "delete",
    "void",
    "null",
    "true",
    "false",
    "undefined",
    "NaN",
    "Infinity",
  ],
  // Keywords
  if: "IF",
  then: "THEN",
  else: "ELSE",
  do: "DO",
  while: "WHILE",
  for: "FOR",
  break: "BREAK",
  continue: "CONTINUE",
  pass: "PASS",
  return: "RETURN",
  fn: "FUNCTION",
  let: "LET",
  const: "CONST",
  new: "NEW",
  this: "THIS",
  class: "CLASS",
  extends: "EXTENDS",
  super: "SUPER",
  import: "IMPORT",
  export: "EXPORT",
  from: "FROM",
  as: "AS",
  in: "IN",
  of: "OF",
  delete: "DELETE",
  void: "VOID",
  null: "NULL",
  true: "TRUE",
  false: "FALSE",
  undefined: "UNDEFINED",
  NaN: "NAN",
  Infinity: "INFINITY",

  // Comments
  "//": "COMMENT",
  "#": "COMMENT",

  // Other
  "...": "SPREAD",
  "=>": "ARROW",
};

/**
 * Tokens Regex for Lexer
 */
const TOKEN_REGEX = {
  identifier: /^(?!\d)[_$\w\xA0-\uFFFF][_$\w\xA0-\uFFFF]*/,
  number: /^[0-9]+(\.[0-9]+)?/,
  string: /^"([^"\\]|\\.)*"/,
  string2: /^'([^'\\]|\\.)*'/,
  punctuation:
    /^[\.,;\:\?\!\-\+\*\/\%\&\|\^\~\<\>\=\{\}\(\)\[\]\@\#\$\\\\`\"\'\s]+/,
  whitespace: /^[\t\v\f\b\s]+/,
  comment: /^\/\/[^\n]*\n/,
  comment2: /^\/\*[\s\S]*?\*\//, // need to be fixed
  regex: /^\/(\\\/|[^\/\n])*\/[gimuy]*/,
  templateString: /^`([^`\\]|\\.)*`/,
  keyword:
    /^(if|then|else|do|while|for|break|continue|pass|return|fn|let|const|new|this|class|extends|super|import|export|from|as|in|of|delete|void|null|true|false|undefined|NaN|Infinity)$/,
  operator:
    /^[\.,;\:\?\!\-\+\*\/\%\&\|\^\~\<\>\=\{\}\(\)\[\]\@\#\$\\\\`\"\'\s]+/,
};

/**
 * Primitive types
 */
const PRIMITIVE_TYPES = [
  "string",
  "integer",
  "float",
  "boolean",
  "null",
  "undefined",
  "NaN",
  "Infinity",
  "void",
  "function",
  "array",
  "object",
  "regex",
  "keyword",
  "operator",
  "identifier",
];

export { TOKENS, TOKEN_REGEX, PRIMITIVE_TYPES };
